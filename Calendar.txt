

Calendar Control 
design code :- 

<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="WebForm1.aspx.cs" Inherits="calcontrol.WebForm1" %>

<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
    <title></title>
</head> <center>
<body >
   
    <form id="form1" runat="server">
        <h1> Calander Prctical</h1>
        <div>
            <h3>Select Start Date </h3>
            <asp:Calendar ID="Calendar1" runat="server" OnSelectionChanged="Calendar1_SelectionChanged" OnDayRender="Calendar1_DayRender" Height="200px" Width="220px" BackColor="#FFFFCC" BorderColor="#FFCC66" BorderWidth="1px" DayNameFormat="Shortest" Font-Names="Verdana" Font-Size="8pt" ForeColor="#663399" ShowGridLines="True">
                <DayHeaderStyle BackColor="#FFCC66" Font-Bold="True" Height="1px" />
                <NextPrevStyle Font-Size="9pt" ForeColor="#FFFFCC" />
                <OtherMonthDayStyle ForeColor="#CC9966" />
                <SelectedDayStyle BackColor="#CCCCFF" Font-Bold="True" />
                <SelectorStyle BackColor="#FFCC66" />
                <TitleStyle BackColor="#990000" Font-Bold="True" Font-Size="9pt" ForeColor="#FFFFCC" />
                <TodayDayStyle BackColor="#FFCC66" ForeColor="White" />
            </asp:Calendar>

            <h3>Select End Date </h3>
            <asp:Calendar ID="Calendar2" runat="server" OnDayRender="Calendar2_DayRender" BackColor="White" BorderColor="#3366CC" BorderWidth="1px" CellPadding="1" DayNameFormat="Shortest"  Font-Names="Verdana" Font-Size="8pt" ForeColor="#003399" Height="200px" Width="220px">
                <DayHeaderStyle BackColor="#99CCCC" ForeColor="#336666" Height="1px" />
                <NextPrevStyle Font-Size="8pt" ForeColor="#CCCCFF" />
                <OtherMonthDayStyle ForeColor="#999999" />
                <SelectedDayStyle BackColor="#009999" Font-Bold="True" ForeColor="#CCFF99" />
                <SelectorStyle BackColor="#99CCCC" ForeColor="#336666" />
                <TitleStyle BackColor="#003399" BorderColor="#3366CC" BorderWidth="1px" Font-Bold="True" Font-Size="10pt" ForeColor="#CCCCFF" Height="25px" />
                <TodayDayStyle BackColor="#99CCCC" ForeColor="White" />
                <WeekendDayStyle BackColor="#CCCCFF" />
            </asp:Calendar>
            <br />
           <b> <asp:Label ID="Label1" runat="server"  Text="No of days Left is :-    " BorderWidth="3px" Width="190px"></asp:Label> &nbsp &nbsp</b>
&nbsp;<asp:Button ID="Button1" runat="server" OnClick="Button1_Click" Text="Result"  Font-Bold="True" />
        </div>
    </form>


</body>

        </center>

</html>

Cs Code:-

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace calcontrol
{
    public partial class WebForm1 : System.Web.UI.Page
    {

        protected void Calendar1_SelectionChanged(object sender, EventArgs e)
        {

        }

        protected void Calendar2_DayRender(object sender, DayRenderEventArgs e)
        {
            if (e.Day.Date.Day == 25)
                e.Cell.Controls.Add(new LiteralControl("</br>Christmas"));


        }

        protected void Calendar1_DayRender(object sender, DayRenderEventArgs e)
        {
            if (e.Day.Date.Day == 27)
                e.Cell.Controls.Add(new LiteralControl("</br>Christmas"));


        }

        protected void Button1_Click(object sender, EventArgs e)
        {
            TimeSpan t = Calendar2.SelectedDate - Calendar1.SelectedDate;
            Label1.Text += t.Days.ToString();
        }
    }
}



User
Create simple application to perform following operations in c#'
i. Finding factorial Value
ii. Money Conversion
iii. Cube of given number
iv. Generate Fibonacci series


using System;

class Program
{
    static void Main()
    {
        while (true)
        {
            Console.WriteLine("Choose an operation:");
            Console.WriteLine("1. Find Factorial");
            Console.WriteLine("2. Money Conversion");
            Console.WriteLine("3. Cube of a Number");
            Console.WriteLine("4. Generate Fibonacci Series");
            Console.WriteLine("5. Exit");

            int choice;
            if (int.TryParse(Console.ReadLine(), out choice))
            {
                switch (choice)
                {
                    case 1:
                        Console.Write("Enter a number to find factorial: ");
                        int factorialInput = int.Parse(Console.ReadLine());
                        Console.WriteLine($"Factorial of {factorialInput} is: {Factorial(factorialInput)}");
                        break;

                    case 2:
                        Console.Write("Enter the amount in USD: ");
                        double usdAmount = double.Parse(Console.ReadLine());
                        Console.WriteLine($"Equivalent amount in INR: {ConvertToINR(usdAmount)}");
                        break;

                    case 3:
                        Console.Write("Enter a number to find its cube: ");
                        double cubeInput = double.Parse(Console.ReadLine());
                        Console.WriteLine($"Cube of {cubeInput} is: {Cube(cubeInput)}");
                        break;

                    case 4:
                        Console.Write("Enter the length of the Fibonacci series: ");
                        int fibonacciLength = int.Parse(Console.ReadLine());
                        Console.WriteLine("Fibonacci Series:");
                        GenerateFibonacci(fibonacciLength);
                        break;

                    case 5:
                        Console.WriteLine("Exiting the program.");
                        return;

                    default:
                        Console.WriteLine("Invalid choice. Please enter a valid option.");
                        break;
                }
            }
            else
            {
                Console.WriteLine("Invalid input. Please enter a valid number.");
            }

            Console.WriteLine(); // Add a newline for better readability
        }
    }

    static int Factorial(int n)
    {
        if (n == 0 || n == 1)
        {
            return 1;
        }
        else
        {
            return n * Factorial(n - 1);
        }
    }

    static double ConvertToINR(double usdAmount)
    {
        // Assuming a simple conversion rate for demonstration purposes
        const double conversionRate = 75.0;
        return usdAmount * conversionRate;
    }

    static double Cube(double num)
    {
        return Math.Pow(num, 3);
    }

    static void GenerateFibonacci(int length)
    {
        int a = 0, b = 1;

        for (int i = 0; i < length; i++)
        {
            Console.Write($"{a} ");

            int temp = a;
            a = b;
            b = temp + b;
        }
    }
}
